<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的知识收集博客</title>
  
  <subtitle>我的知识收集窝</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhiwu.li/"/>
  <updated>2018-10-10T00:56:12.646Z</updated>
  <id>http://zhiwu.li/</id>
  
  <author>
    <name>lizhiwu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git命令</title>
    <link href="http://zhiwu.li/2018/10/10/git%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhiwu.li/2018/10/10/git命令/</id>
    <published>2018-10-10T00:38:04.000Z</published>
    <updated>2018-10-10T00:56:12.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用命令总结"><a href="#git常用命令总结" class="headerlink" title="git常用命令总结"></a>git常用命令总结</h1><p>　　github和gitlab等等一系列的分布式代码托管服务器方便我们开发人员在小组内开发项目，说起分布式代码托管就给大家提一下另外一代码托管SVN,当然他不是分布式的，而是集中式的代码托管，有兴趣的可以查阅资料了解一下，在这里我将着重给大家介绍github这种代码托管如何使用及常用命令</p><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>　　我用的电脑是windons系统，请根据你们自己的电脑紫铜安装对应的git版本，去Git官网上下载安装即可，在这里将不给大家做详细的说明，安装步骤请自行百度。</p><p><strong>ssh -key配置</strong></p><p>　　在这一步我已经默认你安装好了Git，打开Git，在Git命令行输入cd  ~/.ssh检查电脑本机是否有ssh key设置，注意: .ssh是隐藏文件，一般在电脑C/用户/Administrator下面就能够找到。</p><p>　　一般情况下 ，之前没有用过git的同学电脑本机一般不会 有ssh key 的，下面我讲给大家介绍如何配置ssh key</p><p>　　<strong>1、进入路径下，必须保证当前路径 在路径下</strong></p><p>　　在git命令行敲击 ssh-keygen -t  rsa -C “<a href="mailto:xxx.@yyy.zzz" target="_blank" rel="noopener">xxx.@yyy.zzz</a>“ //建议写自己真实有效的邮箱地址。注意：在敲代码是不要将双引号也敲击进去。</p><p>　　然后命令行会出现如下代码：</p><p>　　Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   //此时我们什么都不需要操作，直接回车就好</p><p>　　Enter passphrase (empty for no passphrase):            //此时要你输入码（可以为空，直接回车就好，也可以输入你的密码，这个密码在你最后把本地资源推送到github上面的时候回会让你填写密码，此时密码隐藏，你输入进去是看不到的）</p><p>　　Enter same passphrase again: //再次确认密码（如果你第一次有输入密码，这次就再输一次，如果没有直接回车就行了）</p><p>　　Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa. //生成的密钥</p><p>　　Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub. //生成的公钥</p><p>　　The key fingerprint is:</p><p>　　e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 <a href="mailto:xxxxxx@yy.com" target="_blank" rel="noopener">xxxxxx@yy.com</a></p><p>　　本机已完成ssh key设置，其存放路径为：c:/Users/xxxx_000/.ssh/下。其中xxxx_000为你的用户名。</p><p>　　<strong>2、添加ssh key 到Github上</strong><br>　　首先登陆Github,点击右上角的“▼”→Settings→SSH kyes→Add SSH key。<br>　　然后在打开c:/Users/xxxx_000/.ssh里面的id_rsa.pub文件，全选复制公钥内容<br>　　也可以在git bush中的命令行输入cat ~/.ssh/id_rsa.pub，将得到公钥</p><p>　　Title自定义，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“Add Key“</p><p>　　<strong>3、配置账户</strong></p><p>　　$ git config –global user.name “your_username” #设置用户名</p><p>　　$ git config –global user.email “your_registered_github_Email” #设置邮箱地址(建议用注册giuhub的邮箱)</p><p>　　<strong>4、测试ssh keys是否设置成功。</strong></p><p>　　</p><pre><code>ssh -T git@github.com</code></pre><p>　　The authenticity of host ‘github.com (192.30.252.129)’ can’t be established.</p><p>　　RSA key fingerprint is 16:27:xx:xx:xx:xx:xx:4d:eb:df:a6:48.</p><p>　　Are you sure you want to continue connecting (yes/no)? yes #确认你是否继续联系，输入yes</p><p>　　Warning: Permanently added ‘github.com,192.30.252.129’ (RSA) to the list of known hosts.</p><p>　　Enter passphrase for key ‘/c/Users/xxxx_000/.ssh/id_rsa’: #生成ssh kye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。</p><p>　　Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. #出现此句话，说明设置成功。</p><p>　　到这里，git相关的所有配置已经完成，下面我将给大家介绍最常使用的命令</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>　　<strong>1、创建仓库（公开）</strong></p><p>　　点击github右上角的+里面的new repository<br>　　在repository name栏中输入仓库的名称<br>　　description 栏中可以设置仓库的说明<br>　　piblic（公开）通用 private（非公开）收费<br>　　勾选Initialize this repository with a README ，如果想向GitHub添加手中已有的Git仓库，建议不要勾选<br>　　Add.gitignore 下拉框中选择要使用的框架<br>　　Add a license选择添加许可协议文件<br>　　点击create repository按钮，完成仓库的创建</p><p>　　</p><p><strong>2、克隆之前首先要选择克隆文件的位置（cd）</strong></p><p>　　clone已有仓库<br>　　git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:XXX/yyyy.git //XXX为github的用户名，yyy为仓库名　　</p><p><strong>3、在对应的文件夹中添加新有项</strong></p><p>　　git status<br><strong>4、提交</strong><br>　　git add mmm.sss //mmm为文件名称，sss为文件拓展名（常用git add .）<br>　　git commit -m “hhh” //hhh为git commit 提交信息，是对这个提交的概述</p><p>　　git log//用于查看提交日志<br>　　git push //更新GitHub上的仓库</p><p>　　<strong>5、用git创建仓库</strong></p><p>　　</p><pre><code>mkdir nnn //仓库名　　cd hhh　　git init //初始化仓库　　git status //查看仓库状态　　touch README.md //创建READEME.md文件　　git add ERADME.md //添加ERADME.md至暂存区　　git commit -m &quot;hhh&quot; //如果想要提交信息记录的更详细，请不要加 -m　　git log --pretty=short //加--pretty=short 只显示提交信息的第一行　　git log ggg //ggg是指指定的文件或目录，用于查看指定的目录、文件的日志　　git log -p //查看提交所带来的改动　　git log -p ggg //查看指定文件的改动　　git diff //可以查看工作树，暂存区，最新提交之间的差别　　git diff HEAD //查看工作树与最新提交的差别</code></pre><p>　　<strong>6、分支操作</strong></p><p>　</p><p>　git branch //显示分支一览表，同时确认当前所在的分支</p><p>　　git checkout -b aaa //创建名为aaa的分支，并且切换到aaa分支<br>　　（git branch aaa //创建名为aaa的分支<br>　　git checkout aaa // 切换到aaa分支<br>　　）能和git branch -b aaa 得到同样的效果</p><p>　　git checkout - //切换到上一分支</p><p>　　<strong>7、合并分支</strong></p><p>　　git checkout master //切换到master分支</p><p>　　git marge –no–ff aaa // 加–no–ff 参数可以在历史记录中明确地记录本次分支的合并</p><p>　　git log –graph //以图表形式查看分支</p><p>　　<strong>8、更改提交的操作</strong></p><p>　　git reset //回溯历史版本</p><p>　　git reset –hrad //回溯到指定状态，只要提供目标时间点的哈希值</p><p>　　<strong>9、推进历史</strong></p><p>　　git reflog //查看仓库的操作日志，找到要推历史的哈希值</p><p>　　git checkout master</p><p>　　git reset –hrad ddd //ddd为要推进历史的哈希值</p><p>　　<strong>10、修改提交信息 git commit –amend</strong></p><p>　　压缩历史 git rebase -i 错字漏字等失误称作typo</p><p>　　根据以前的步骤在GitHub上创建仓库，应于本地的仓库名相同 GitHub上面创建的仓库的路径为<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>: 用户名/仓库名.git</p><p>　　git remote add eee <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>: 用户名/仓库名.git //添加远程仓库，并将<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>: 用户名/仓库名.git远程仓库的名称改为eee</p><p>　　git push -u eee master //推送至远程仓库 master分支下 -u 参数可以在推送的同时，将eee仓库的master分支设置为本地仓库的当前分<br>　　支的的upstream（上游）。添加这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从eee的master<br>分支中获取内容</p><p>　　git checkout -b feature d eee/feature d //获取远程的feature d分支到本地仓库，-b参数后面是本地仓库中新建的仓库的名称</p><p>　　git pull eee feature d //将本地的feature d分支更新为最新状态</p><p>　　在GitHub上面查看两个分支之间的差别，只需要在地址栏中输入<a href="http://github.com/用户名/仓库名/分支1...分支2" target="_blank" rel="noopener">http://github.com/用户名/仓库名/分支1...分支2</a></p><p>　　<strong>11、查看master分支在最近七天内的差别</strong><br>　　<a href="http://github.com/用户名/仓库名/master@{7.day.ago}...master" target="_blank" rel="noopener">http://github.com/用户名/仓库名/master@{7.day.ago}...master</a> （同样，day，week，month，year都是可以哒）</p><p>　　<strong>12、查看与指定日期之间的差别</strong><br>　　<a href="http://github.com/用户名/仓库名/master@{xxxx-xx-xx}...master" target="_blank" rel="noopener">http://github.com/用户名/仓库名/master@{xxxx-xx-xx}...master</a> （xxxx-xx-xx代表年月日）</p><p>　　到这里，git相关的命令已经全部介绍完成，剩下的就靠大家自己学习了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git常用命令总结&quot;&gt;&lt;a href=&quot;#git常用命令总结&quot; class=&quot;headerlink&quot; title=&quot;git常用命令总结&quot;&gt;&lt;/a&gt;git常用命令总结&lt;/h1&gt;&lt;p&gt;　　github和gitlab等等一系列的分布式代码托管服务器方便我们开发人员在小组
      
    
    </summary>
    
    
      <category term="git" scheme="http://zhiwu.li/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>FRP内网穿透工具</title>
    <link href="http://zhiwu.li/2018/09/29/FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://zhiwu.li/2018/09/29/FRP内网穿透工具/</id>
    <published>2018-09-29T05:04:04.000Z</published>
    <updated>2018-09-29T05:51:41.896Z</updated>
    
    <content type="html"><![CDATA[<p><strong>FRP内网穿透工具</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> <strong>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</strong></p><ul><li>利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。</li><li>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。</li><li>利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。</li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>在原有版本的基础上增加了用户和密码功能，服务器每一个终端有一个配置文件，配置文件包含用户名，密码，和开放的端口。增加了安全性</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>将 frps 及 frps.ini 放到具有公网 IP 的机器上。<br>将 frpc 及 frpc.ini 放到处于内网环境的机器上。</strong><br>通过 ssh 访问公司内网机器<br>修改 frps.ini 文件，这里使用了最简化的配置：</p><p> frps.ini</p><pre><code>[common]bind_port = 7000</code></pre><p>启动 frps：</p><pre><code>./frps -c ./frps.ini</code></pre><p>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x；frpc.ini</p><pre><code>[common]server_addr = x.x.x.xserver_port = 7000[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22remote_port = 6000</code></pre><p>启动 frpc：<br>./frpc -c ./frpc.ini<br>通过 ssh 访问内网机器，假设用户名为 test：<br>ssh -oPort=6000 <a href="mailto:test@x.x.x.x" target="_blank" rel="noopener">test@x.x.x.x</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;FRP内网穿透工具&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt; &lt;strong&gt;frp 是一个可用于内网穿透的高性能的反向代理应用，支
      
    
    </summary>
    
    
      <category term="go" scheme="http://zhiwu.li/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>sa无法在当前安全上下文下访问数据库</title>
    <link href="http://zhiwu.li/2018/09/29/sa%E6%97%A0%E6%B3%95%E5%9C%A8%E5%BD%93%E5%89%8D%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8B%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://zhiwu.li/2018/09/29/sa无法在当前安全上下文下访问数据库/</id>
    <published>2018-09-29T02:40:18.000Z</published>
    <updated>2018-09-29T02:40:34.838Z</updated>
    
    <content type="html"><![CDATA[<p>﻿<strong>服务器主体 “sa” 无法在当前安全上下文下访问数据库 “db1”。</strong><br>            <em>sql2008同一服务器附加两个数据库 db1 和db2<br>            db1中建一表A，和一个存储过程A<br>            db2中建有一表B，表B上有一个触发器（insert 触发），和一个存储过程B.<br>            我用管理员sa 用户登录，执行存储过程B，向表B中写入一条数据，在B表的触发器中调用数据库db1中的存储过程A，<br>            触发器中的调用格式为：<br>            exec db1.dbo.A 参数1,参数2，….<br>            结果出现<br>            消息 916，级别 14，状态 1，过程 TRGDetialsData，第 47 行<br>            服务器主体 “sa” 无法在当前安全上下文下访问数据库 “db1”。<br>            我的sa用户已经是最高权限了，为什么还有这个提示<br>            到底如何在触发器中调用另外一个数据库（同一服务器）中的存储过程</em><br><a id="more"></a><br>            ——解决方案——————–<br>            先执行以下打开TRUSTWORTHY.</p><pre><code>SQL code ALTER DATABASE db1 SET TRUSTWORTHY ON ALTER DATABASE db2 SET TRUSTWORTHY ON再执行这个,Use MasterGOEXEC master.dbo.sp_configure &apos;show advanced options&apos;, 1RECONFIGURE WITH OVERRIDEGOEXEC master.dbo.sp_configure &apos;xp_cmdshell&apos;, 1  --for backup sp LZWMISDBBackupRECONFIGURE WITH OVERRIDEGOALTER DATABASE ReportConfigDJ SET TRUSTWORTHY ON     --for use WWALMDB sp APV_GetAlarmDescFromWWALMDB</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;﻿&lt;strong&gt;服务器主体 “sa” 无法在当前安全上下文下访问数据库 “db1”。&lt;/strong&gt;&lt;br&gt;            &lt;em&gt;sql2008同一服务器附加两个数据库 db1 和db2&lt;br&gt;            db1中建一表A，和一个存储过程A&lt;br&gt;            db2中建有一表B，表B上有一个触发器（insert 触发），和一个存储过程B.&lt;br&gt;            我用管理员sa 用户登录，执行存储过程B，向表B中写入一条数据，在B表的触发器中调用数据库db1中的存储过程A，&lt;br&gt;            触发器中的调用格式为：&lt;br&gt;            exec db1.dbo.A 参数1,参数2，….&lt;br&gt;            结果出现&lt;br&gt;            消息 916，级别 14，状态 1，过程 TRGDetialsData，第 47 行&lt;br&gt;            服务器主体 “sa” 无法在当前安全上下文下访问数据库 “db1”。&lt;br&gt;            我的sa用户已经是最高权限了，为什么还有这个提示&lt;br&gt;            到底如何在触发器中调用另外一个数据库（同一服务器）中的存储过程&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="http://zhiwu.li/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server Assembly还原数据库后的问题</title>
    <link href="http://zhiwu.li/2018/09/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E5%8E%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://zhiwu.li/2018/09/29/数据库还原问题/</id>
    <published>2018-09-29T01:16:55.000Z</published>
    <updated>2018-09-29T02:12:00.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL-Server-Assembly还原数据库后的问题"><a href="#SQL-Server-Assembly还原数据库后的问题" class="headerlink" title="SQL Server Assembly还原数据库后的问题"></a>SQL Server Assembly还原数据库后的问题</h1><p>　　前段时间给别人做迁移数据库时候,遇到一些问题.大致是,如果备份的数据库存在EXTERNAL_ACCESS 和UNSAFE的程序集,那么在还原的时候程序集会出现一些奇怪的错误:</p><p>　　消息 10314，级别 16，状态 11，第 1 行</p><p>　　在尝试加载程序集 ID 65536 时 Microsoft .NET Framework 出错。服务器可能资源不足，或者不信任该程序集，因为它的 PERMISSION_SET 设置为 EXTERNAL_ACCESS 或 UNSAFE。请重新运行查询，或检查有关的文档了解如何解决程序集信任问题。有关此错误的详细信息:<br><a id="more"></a><br>　　System.IO.FileLoadException: 未能加载文件或程序集“testclr, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null”或它的某一个依赖项。异常来自 HRESULT:0x80FC80F1<br>　　System.IO.FileLoadException: </p><p>　　在 System.Reflection.Assembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, Assembly locationHint, StackCrawlMark&amp; stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection) </p><p>　　在 System.Reflection.Assembly.InternalLoad(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark&amp; stackMark, Boolean forIntrospection) </p><p>　　在 System.Reflection.Assembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark&amp; stackMark, Boolean forIntrospection) </p><p>　　在 System.Reflection.Assembly.Load(String assemblyString)</p><p>　　至于产生的原因大概是,在备份数据库的时候,在机器A,那么数据库的拥有者是A\Administrator(如果用windows登录创建),那么但是我们还原到服务器B,那么拥有者可能是B\Administrator,那么SQL CLR的安全性会认为该程序集不可靠.</p><p>　　例如:</p><p>　　我首先创建一个简单的SQL CLR 存储过程:</p><p>　　using System;using System.Data;<br>　　using System.Data.SqlClient;<br>　　using System.Data.SqlTypes;<br>　　using Microsoft.SqlServer.Server;<br>　　public partial class StoredProcedures{<br>　　 [Microsoft.SqlServer.Server.SqlProcedure]<br>　　publicstaticvoid Test()    {<br>　　// 在此处放置代码    }};编译创建程序集.</p><p>　　在机器A上的数据库上执行:</p><p>　　CREATE DATABASE test;<br>　　USE test;<br>　　ALTER DATABASE test SET TRUSTWORTHY ON;<br>　　CREATE ASSEMBLY [TestCLR] FROM ‘E:\Documents\Visual Studio 2010\Projects\TestCLR\TestCLR\bin\Release\TestCLR.dll’<br>　　WITH PERMISSION_SET = EXTERNAL_ACCESS;<br>　　–SAFE;<br>　　CREATE PROC dbo.usp_testASEXTERNAL NAME [TestCLR].StoredProcedures.Test;<br>　　EXEC dbo.usp_test;<br>　　USE master;<br>　　BACKUP DATABASE test TO DISK = ‘c:\test.bak’ WITH FORMAT;  </p><p>　　将c:\test.bak copy 到机器B上,然后执行:</p><p>　　USE [master];–还原数据库RESTORE DATABASE test FROM DISK = ‘c:\test.bak’ WITH RECOVERY,MOVE ‘test’ TO ‘E:\data\test.mdf’,MOVE ‘test_log’ TO ‘E:\data\test.ldf’,REPLACE;</p><p>　　–如果没有启用CLR,开启EXEC sp_configure ‘clr enabled’,1RECONFIGURE WITH OVERRIDE; USE test;</p><p>　　–查看程序集,是存在的.SELECT <em> FROM sys.assemblies;SELECT </em> FROM sys.assembly_files;</p><p>　　–还原之后的数据库TRUSTWORTHY 都是OFF的,需要重新设置ALTER DATABASE test SET TRUSTWORTHY ON; USE test;</p><p>　　–执行存储过程EXEC dbo.usp_test;</p><p>　　但是一执行就报错了.</p><p>　　解决方案:</p><p>　　在还原数据库之后,我们可以将数据库的OWNER设置成SA.</p><p>　　exec sp_changedbowner ‘sa’</p><p>　　再调用存储过程就是成功的.</p><p>　　可以查看:KB</p><p>　　后来经过一些整理,发现当SQL CLR 存在EXTERNAL_ACCESS或者是UNSAFE的程序集的时候,SQL Server会检查DBO的SID在sys.databases 和sys.server_principals是否一致.</p><p>　　因此我们可能未必一定要修改成sa 的,只要所有者的SID在sys.databases和sys.server_principals 是一致的,就不出问题.</p><p>　　我们在SSMS里面右键数据库属性-&gt;找到文件选项卡-&gt;发现在所有者(是空的,还原以后原来的SID,数据库所有者在当前的sys.server_principals不匹配的),我们可以在 […] 里面选择一个,具有创建CREATE ASSEMLY 权限的所有者就好,我选择了B\Administrator,然后测试 CLR 存储过程,没问题,</p><p>　　引深:</p><p>　　在SQL Server 复制里面也存在类似的问题,就是我们做 “对等复制” 的时候,会出现DBO不存在,以及sp_replcmd 不存在类似的错误.其实也是因为对等复制初始化订阅是通过 RESTORE 来实现的,因此只要简单的修改数据库所有者 就好了….那么对等复制的问题也就解决了!!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL-Server-Assembly还原数据库后的问题&quot;&gt;&lt;a href=&quot;#SQL-Server-Assembly还原数据库后的问题&quot; class=&quot;headerlink&quot; title=&quot;SQL Server Assembly还原数据库后的问题&quot;&gt;&lt;/a&gt;SQL Server Assembly还原数据库后的问题&lt;/h1&gt;&lt;p&gt;　　前段时间给别人做迁移数据库时候,遇到一些问题.大致是,如果备份的数据库存在EXTERNAL_ACCESS 和UNSAFE的程序集,那么在还原的时候程序集会出现一些奇怪的错误:&lt;/p&gt;
&lt;p&gt;　　消息 10314，级别 16，状态 11，第 1 行&lt;/p&gt;
&lt;p&gt;　　在尝试加载程序集 ID 65536 时 Microsoft .NET Framework 出错。服务器可能资源不足，或者不信任该程序集，因为它的 PERMISSION_SET 设置为 EXTERNAL_ACCESS 或 UNSAFE。请重新运行查询，或检查有关的文档了解如何解决程序集信任问题。有关此错误的详细信息:&lt;br&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="http://zhiwu.li/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server 服务器名</title>
    <link href="http://zhiwu.li/2018/09/29/SQL-Server-Name/"/>
    <id>http://zhiwu.li/2018/09/29/SQL-Server-Name/</id>
    <published>2018-09-29T01:09:16.000Z</published>
    <updated>2018-09-29T01:11:29.932Z</updated>
    
    <content type="html"><![CDATA[<p>在SQL Server 2005/2008安装后，即记录了计算机名做为 “sql server服务器名”.<br>当修改计算机名时， 需要修改sql server中对应的服务器名， 否则将影响“发布/订阅”，“镜像集群”等功能。</p><p>– 检查SQL Server中的“服务器名[/命名实例名]”, 和当前真实的“计算机名[/命名实例名]”。如果修改了计算机名，则这两者即会不一致。</p><p>select @@serverName,  serverproperty(‘serverName’)<br>– 将”服务器名”, 修改为正确的计算机名<br>EXEC sp_dropserver ‘服务器名[/命名实例名]’;           – 即旧的计算机名<br>GO<br>EXEC sp_addserver ‘计算机名[/命名实例名]’, ‘local’; – 即新的计算机名<br>go<br>– 重启SQL Server</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SQL Server 2005/2008安装后，即记录了计算机名做为 “sql server服务器名”.&lt;br&gt;当修改计算机名时， 需要修改sql server中对应的服务器名， 否则将影响“发布/订阅”，“镜像集群”等功能。&lt;/p&gt;
&lt;p&gt;– 检查SQL Server中
      
    
    </summary>
    
    
      <category term="SQL" scheme="http://zhiwu.li/tags/SQL/"/>
    
  </entry>
  
</feed>
